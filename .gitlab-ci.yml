# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
image: continuumio/miniconda3:latest

variables:
  DOCKER_REGISTRY: 950438895271.dkr.ecr.us-west-2.amazonaws.com
  APP_NAME: spiceql
  FUNCTION_NAME: spiceqlambdadev


stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

variables:
    SSPICE_DEBUG : y

before_script:
    - conda init bash
    - source ~/.bashrc

build-and-ctest:       # This job runs in the build stage, which runs first.
  variables:
    SSPICE_DEBUG : y
    BUILD_TYPE : Release
  stage: build
  script:
    - ls $CI_PROJECT_DIR
    - git config http.sslVerify "false"
    - GIT_SSL_NO_VERIFY=true git submodule update --init --recursive
    - touch /etc/pip.conf
    - echo -e "[global]\n
                trusted-host = pypi.python.org\n
                    \tpypi.org\n
                    \tfiles.pythonhosted.org" >> /etc/pip.conf
    - cat /etc/pip.conf
    - SSL_NO_VERIFY=1 conda env create -f environment.yml --prefix $CI_PROJECT_DIR/env
    - conda init bash
    - source ~/.bashrc
    - conda activate $CI_PROJECT_DIR/env
    - SSL_NO_VERIFY=1 conda install make gcc_linux-64 gxx_linux-64  pthread-stubs
    - conda info 
    - conda list
    - cmake -E make_directory $CI_PROJECT_DIR/build
    - cmake -E make_directory $CI_PROJECT_DIR/install
    - cd $CI_PROJECT_DIR/build/
    - cmake $CI_PROJECT_DIR -DCSpice_DIR=$CONDA_PREFIX/lib/cmake/cspice/ -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DSPICEQL_BUILD_DOCS=OFF -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/install
    - cmake --build . 
    - cmake --install . 
    - echo "Running unit tests... This will take about 60 seconds."
    - cd $CI_PROJECT_DIR/build/
    - ctest -VV -C $BUILD_TYPE
  artifacts:
    paths:
      - $CI_PROJECT_DIR/build
      - $CI_PROJECT_DIR/install


check-install-binaries:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  dependencies:
    - build-and-ctest
  script:
    - cd $CI_PROJECT_DIR/install/
    - test -e lib/libSpiceQL.so
    - test -e include/SpiceQL/sugar_spice.h

check-installed-json-files:
  stage: test
  dependencies:
    - build-and-ctest
  script:
    - cd $CI_PROJECT_DIR/install
    - pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org jsonschema
    - cd $CI_PROJECT_DIR/SpiceQL/db
    - | 
      for file in *.json;
          do
          pwd
          jsonschema --instance "$file" schema/spiceMissionSchmea.schema.json 
      done;

deploy-job:  
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  image: 
    name: $CI_REGISTRY/usgs-chs/chs-library/docker/images/docker:latest
  services:
    - name: $CI_REGISTRY/usgs-chs/chs-library/docker/images/docker:dind
      alias: docker
  before_script:
    - apk add --no-cache python3
    - python3 -m ensurepip && rm -r /usr/lib/python*/ensurepip
    - pip3 install --no-cache --upgrade pip setuptools wheel
    - if [ ! -e /usr/bin/pip ]; then ln -s pip3 /usr/bin/pip ; fi
    - pip install awscli
    - aws --version
    - docker --version 
  script:
    - echo "Deploying application..."
    - aws ecr get-login-password --region us-west-2 | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    - docker build -f aws/Dockerfile -t $APP_NAME . 
    - docker tag $APP_NAME:latest $DOCKER_REGISTRY/$APP_NAME:latest
    - docker push $DOCKER_REGISTRY/$APP_NAME:latest
    - aws lambda update-function-code --region us-west-2 --function-name $FUNCTION_NAME --image-uri $DOCKER_REGISTRY/$APP_NAME:latest
    - echo "Application successfully deployed."
  rules:
    - if: "$CI_COMMIT_BRANCH == 'main'"
      changes:
      - .gitlab-ci
      - SpiceQL/*
      - aws/*

