# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
image: continuumio/miniconda3:latest

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

variables:
    SSPICE_DEBUG : y

before_script:
    - conda init bash
    - source ~/.bashrc

build-and-ctest:       # This job runs in the build stage, which runs first.
  variables:
    SSPICE_DEBUG : y
    BUILD_TYPE : Release
  stage: build
  tags:
  - dind
  script:
    - ls $CI_PROJECT_DIR
    - git config http.sslVerify "false"
    - git config --global url."https://github.com/".insteadOf "git@github.com:"
    - git config --global url."https://".insteadOf git://
    - GIT_SSL_NO_VERIFY=true git submodule update --init --recursive
    - touch /etc/pip.conf
    - echo -e "[global]\n
                trusted-host = pypi.python.org\n
                    \tpypi.org\n
                    \tfiles.pythonhosted.org" >> /etc/pip.conf
    - cat /etc/pip.conf
    - SSL_NO_VERIFY=1 conda env create -f environment.yml --prefix $CI_PROJECT_DIR/env
    - conda init bash
    - source ~/.bashrc
    - conda activate $CI_PROJECT_DIR/env
    - SSL_NO_VERIFY=1 conda install make gcc_linux-64 gxx_linux-64  pthread-stubs
    - conda info 
    - conda list
    - cmake -E make_directory $CI_PROJECT_DIR/build
    - cmake -E make_directory $CI_PROJECT_DIR/install
    - cd $CI_PROJECT_DIR/build/
    - cmake $CI_PROJECT_DIR -DCSpice_DIR=$CONDA_PREFIX/lib/cmake/cspice/ -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DSPICEQL_BUILD_DOCS=OFF -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR/install
    - cmake --build . 
    - cmake --install . 
    - echo "Running unit tests... This will take about 60 seconds."
    - cd $CI_PROJECT_DIR/build/
    - ctest -VV -C $BUILD_TYPE
  artifacts:
    paths:
      - $CI_PROJECT_DIR/build
      - $CI_PROJECT_DIR/install


check-install-binaries:   # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  tags:
  - dind
  dependencies:
    - build-and-ctest
  script:
    - cd $CI_PROJECT_DIR/install/
    - test -e lib/libSpiceQL.so
    - test -e include/SpiceQL/spiceql.h

check-installed-json-files:
  stage: test
  tags:
  - dind
  dependencies:
    - build-and-ctest
  script:
    - cd $CI_PROJECT_DIR/install
    - pip install --trusted-host pypi.org --trusted-host pypi.python.org --trusted-host files.pythonhosted.org jsonschema
    - cd $CI_PROJECT_DIR/SpiceQL/db
    - | 
      for file in *.json;
          do
          pwd
          jsonschema --instance "$file" schema/spiceMissionSchmea.schema.json 
      done;

update-openApi:
  stage: deploy
  tags: 
  - deploy
  image: 
    name: $CI_REGISTRY/usgs-chs/chs-library/docker/images/docker:latest
  dependencies: []
  rules:
    - if: "$CI_COMMIT_BRANCH == 'main'"
      changes:
      - aws/openapi.yml
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
  script:
    - aws s3 cp aws/openapi.yml s3://spiceql-openapi-files
    - aws apigateway put-rest-api --rest-api-id 3ywct7h7qb --region us-west-2 --mode overwrite --body 'fileb://aws/openapi.yml'
    - aws apigateway create-deployment --rest-api-id 3ywct7h7qb --region us-west-2 --stage-name v1

update-stacks:
  stage: deploy
  tags: 
  - deploy
  image: 
    name: $CI_REGISTRY/usgs-chs/chs-library/docker/images/docker:latest
  dependencies: []
  rules:
    - if: "$CI_COMMIT_BRANCH == 'main'"
      changes:
      - aws/SpiceQlMainStack.yml
      - aws/SpiceQLambdaStack.yml
  before_script:
    - apk add --no-cache curl jq python3 py3-pip
    - pip install awscli
  script:
    - aws s3 cp aws/SpiceQLambdaStack.yml s3://cf-templates-1bxumkby1rqpi-us-west-2/spiceql-cf-templates/
    - aws s3 cp aws/SpiceQlMainStack.yml s3://cf-templates-1bxumkby1rqpi-us-west-2/spiceql-cf-templates/
    - aws cloudformation update-stack --region us-west-2 --stack-name spiceql-dev --template-url https://s3.amazonaws.com/cf-templates-1bxumkby1rqpi-us-west-2/spiceql-cf-templates/SpiceQlMainStack.yml
  
update-image:  
  stage: deploy
  tags:
  - deploy
  dependencies: []
  variables:
    IMAGEURI: 950438895271.dkr.ecr.us-west-2.amazonaws.com/spiceql:latest
    REGION: us-west-2
    FUNCTIONS: spiceqlambdadev strSclkToEtlambda doubleSclkToEtlambda utcToEtlambda translateNameToCodelambda translateCodeToNamelambda getTargetStateslambda getTargetOrientationslambda findMissionKeywordslambda findTargetKeywordslambda getTargetFrameInfolambda getFrameInfolambda frameTraceLambda
  image: 
    name: $CI_REGISTRY/usgs-chs/chs-library/docker/images/docker:latest
  services:
    - name: $CI_REGISTRY/usgs-chs/chs-library/docker/images/docker:dind
      alias: docker
  before_script:
    - apk add --no-cache curl jq python3 py3-pip git
    - pip install awscli
    - aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin 950438895271.dkr.ecr.us-west-2.amazonaws.com
  script:
    - git submodule update --init --recursive
    - docker build -t spiceql .
    - docker tag spiceql:latest $IMAGEURI
    - docker push $IMAGEURI
    - |
      for func in $FUNCTIONS
        do
          aws lambda update-function-code --region $REGION --function-name $func --image-uri $IMAGEURI
        done
  rules:
    - if: "$CI_COMMIT_BRANCH == 'main'"
      changes:
      - .gitlab-ci.yml
      - SpiceQL/*
      - aws/*

