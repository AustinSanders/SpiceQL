AWSTemplateFormatVersion: 2010-09-09
Description: SpiceQL Dev Lambda Deploy
Resources:

  #EFS
  AccessPointResource:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: fs-0dafe0512ba2eaa98
      PosixUser:
        Uid: '1000'
        Gid: '1000'
      RootDirectory:
        CreationInfo:
          OwnerGid: '1000'
          OwnerUid: '1000'
          Permissions: '755'
        Path: '/'
  EFSAccessPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      Description: Allow Manager to mount and write to EFS
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - elasticfilesystem:ClientMount
              - elasticfilesystem:ClientWrite
            Resource: '*'

  # API Gateway
  SpiceQlRestfulApi: 
    Type: AWS::ApiGateway::RestApi
    Properties: 
      Name: "SpiceQlAPI"
      EndpointConfiguration: 
        Types:
            - REGIONAL
  SpiceQlModel:
    Type: AWS::ApiGateway::Model
    Properties: 
      ContentType: "application/json"
      Name: "schema"
      RestApiId: !Ref SpiceQlRestfulApi
  SpiceQlResource: 
    Type: AWS::ApiGateway::Resource 
    Properties:
      PathPart: spiceql
      RestApiId: !Ref SpiceQlRestfulApi
      ParentId: !GetAtt 
        - SpiceQlRestfulApi
        - RootResourceId
  SpiceQlGet:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      RestApiId: !Ref SpiceQlRestfulApi
      AuthorizationType: None
      RequestParameters: {
        method.request.querystring.func: false,
        method.request.querystring.mission: false
      }
      ResourceId: !Ref SpiceQlResource
      Integration: 
        Type: AWS
        TimeoutInMillis: 29000
        IntegrationHttpMethod: POST
        RequestParameters: {
          integration.request.querystring.func: method.request.querystring.func,
          integration.request.querystring.mission: method.request.querystring.mission,
        }
        RequestTemplates:
          "application/json": "{\"func\": \"$input.params('func')\", \"mission\": \"$input.params('mission')\" }"
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SpiceQlLambda.Arn}/invocations" 
        IntegrationResponses: 
          - ResponseTemplates:
              "application/json": "'$input.body'"
            StatusCode: 200
      MethodResponses:
        - ResponseModels: 
            "application/json": !Ref SpiceQlModel 
          ResponseParameters: 
            method.response.header.link: true
          StatusCode: 200
  SpiceQlRestApiDeployment: 
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - SpiceQlRestfulApi 
      - SpiceQlGet
    Properties: 
      RestApiId: !Ref SpiceQlRestfulApi
      StageName: v1
  SpiceQlSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: "Sg for SpiceQlLambda"
      GroupName: SpiceQlSecurityGroupDev
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 442
          ToPort: 2050
          CidrIp: 0.0.0.0/0 
      SecurityGroupIngress: 
        - IpProtocol: tcp 
          FromPort: 442
          ToPort: 2050
          CidrIp: 0.0.0.0/0 
      VpcId: vpc-004f1e36134bcaa04

  #Domain
  SpiceQlDomainName:
      Type: AWS::ApiGateway::DomainName
      Properties: 
          RegionalCertificateArn: arn:aws:acm:us-west-2:950438895271:certificate/6aa50410-fb5a-4300-888f-55aae14463df
          DomainName: spiceql-dev.prod-asc.chs.usgs.gov
          EndpointConfiguration:
            Types:
            - REGIONAL
  SpiceQlRoute53:
      Type: AWS::Route53::RecordSet
      Properties: 
        HostedZoneName: prod-asc.chs.usgs.gov.
        AliasTarget: 
            DNSName: !GetAtt SpiceQlDomainName.RegionalDomainName
            HostedZoneId: !GetAtt SpiceQlDomainName.RegionalHostedZoneId
        Name: spiceql-dev.prod-asc.chs.usgs.gov
        Type: A
  SpiceQlApiMapping:
      Type: AWS::ApiGatewayV2::ApiMapping
      Properties: 
        DomainName: !Ref SpiceQlDomainName
        ApiId: !Ref SpiceQlRestfulApi
        ApiMappingKey: 'v1'
        Stage: v1
        
  # Lambda
  SpiceQlLambda:
    Type: AWS::Lambda::Function
    Properties:
      Timeout: 100 
      Role: arn:aws:iam::950438895271:role/csr-Lambda-Role
      FunctionName: spiceqlambdadev
      PackageType: Image
      FileSystemConfigs: 
        - Arn: !GetAtt AccessPointResource.Arn
          LocalMountPath: '/mnt/isis_data'
      Code:
        ImageUri: 950438895271.dkr.ecr.us-west-2.amazonaws.com/spiceql:latest
      VpcConfig:
        SecurityGroupIds: 
          - !Ref SpiceQlSG 
        SubnetIds: 
          - subnet-0326c18b7c38caa73
  SpiceQlApiPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SpiceQlLambda
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SpiceQlLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:950438895271:${SpiceQlRestfulApi}/*/GET/spiceql"